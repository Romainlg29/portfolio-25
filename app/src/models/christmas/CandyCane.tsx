/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 .\CandyCane.glb -Tt
*/

import { a, useSpring } from "@react-spring/three";
import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    ["Candy_Cane-Mesh"]: THREE.Mesh;
    ["Candy_Cane-Mesh_1"]: THREE.Mesh;
  };
  materials: {
    Red: THREE.MeshStandardMaterial;
    White: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/christmas/CandyCane-transformed.glb"
  ) as GLTFResult;

  const [animation] = useSpring(
    () => ({
      from: {
        scale: 0,
      },
      to: {
        scale: props.scale ?? 1,
      },
    }),
    [props.scale]
  );

  return (
    <a.group {...props} scale={animation.scale} dispose={null}>
      <mesh
        geometry={nodes["Candy_Cane-Mesh"].geometry}
        material={materials.Red}
      />
      <mesh
        geometry={nodes["Candy_Cane-Mesh_1"].geometry}
        material={materials.White}
      />
    </a.group>
  );
}

useGLTF.preload("/christmas/CandyCane-transformed.glb");

export default Model;
