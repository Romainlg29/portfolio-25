/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 eiffel.glb --transform
*/

import { a, useSpring } from "@react-spring/three";
import { useGLTF } from "@react-three/drei";
import { GroupProps } from "@react-three/fiber";
import { FC, useMemo, useState } from "react";
import LightShow from "../components/LightShow";
import RotatingSpot from "../components/RotatingSpot";
import { isShowTime } from "../constants/timing";
import { ColorScheme, useColorScheme } from "../hooks/useColorScheme";
import { useMediaQuery } from "../hooks/useMediaQuery";

const Eiffel: FC<GroupProps> = (props) => {
  // Retrieve the user's color scheme
  const scheme = useColorScheme();

  // Reduce motion
  const reduced = useMediaQuery("(prefers-reduced-motion: reduce)");

  // State to toggle the glittering
  const [isGlittering, setIsGlittering] = useState<boolean>(
    (isShowTime || scheme === ColorScheme.Dark) && !reduced
  );

  const { nodes } = useGLTF("/eiffel-transformed.glb");

  // Material selection based on the color scheme
  const material = useMemo(() => {
    if (scheme === ColorScheme.Dark) {
      return <meshStandardMaterial color="#333333" />;
    }

    return <meshStandardMaterial color="#ffffff" />;
  }, [scheme]);

  const [animation] = useSpring(() => ({
    from: {
      scale: 0,
    },
    to: {
      scale: 0.8,
    },
  }));

  return (
    <a.group {...props} scale={animation.scale} dispose={null}>
      <RotatingSpot speed={0.5} position={[0, 2.4, 0]} />
      <pointLight position={[0, 2.44, 0]} intensity={0.01} />

      {isGlittering ? <LightShow /> : null}

      <mesh
        // @ts-expect-error expected
        geometry={nodes.Tour_Eiffel.geometry}
        position={[-0.283, 0.478, 0.56]}
        scale={[0.026, 0.005, 0.005]}
        castShadow
        receiveShadow
        onClick={(e) => {
          e.stopPropagation();

          setIsGlittering((prev) => !prev);
        }}
      >
        {material}
      </mesh>
    </a.group>
  );
};

useGLTF.preload("/eiffel-transformed.glb");

export default Eiffel;
