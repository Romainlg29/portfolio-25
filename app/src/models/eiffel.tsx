/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 eiffel.glb --transform
*/

import { FC, useMemo, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { extend, GroupProps, useFrame } from "@react-three/fiber";
import RotatingSpot from "../components/RotatingSpot";
import { GlitterMaterial } from "../shaders/glitter/GlitterMaterial";
import { ColorScheme, useColorScheme } from "../hooks/useColorScheme";
import { isShowTime } from "../constants/timing";

extend({ GlitterMaterial });

const Eiffel: FC<GroupProps> = (props) => {
  // Glitter material reference to update the uniforms
  const glitterMaterialRef = useRef<typeof GlitterMaterial | null>(null);

  // State to toggle the glittering
  const [isGlittering, setIsGlittering] = useState<boolean>(isShowTime);

  // Retrieve the user's color scheme
  const scheme = useColorScheme();

  const { nodes } = useGLTF("/eiffel-transformed.glb");

  // Material selection based on the color scheme and glittering effect
  const material = useMemo(() => {
    if (scheme === ColorScheme.Dark || isGlittering) {
      return (
        // @ts-expect-error TS doesn't know about the custom material
        <glitterMaterial key={GlitterMaterial.key} ref={glitterMaterialRef} />
      );
    }

    return <meshStandardMaterial color="#ffffff" />;
  }, [scheme, isGlittering]);

  // Update the time uniform for the glittering effect
  useFrame(({ clock }) => {
    if (glitterMaterialRef.current) {
      // @ts-expect-error expected from TS
      glitterMaterialRef.current.uTime = clock.getElapsedTime() * 0.000001;
    }
  });

  return (
    <group {...props} dispose={null}>
      <RotatingSpot speed={0.5} position={[0, 2.4, 0]} />
      <pointLight position={[0, 2.44, 0]} intensity={0.01} />

      <mesh
        // @ts-expect-error expected
        geometry={nodes.Tour_Eiffel.geometry}
        position={[-0.283, 0.478, 0.56]}
        scale={[0.026, 0.005, 0.005]}
        castShadow
        receiveShadow
        onClick={() => setIsGlittering((prev) => !prev)}
      >
        {material}
      </mesh>
    </group>
  );
};

useGLTF.preload("/eiffel-transformed.glb");

export default Eiffel;
