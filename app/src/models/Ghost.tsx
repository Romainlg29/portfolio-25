/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 .\Ghost.glb -Tt
*/

import { a, useSpring } from "@react-spring/three";
import { useGLTF } from "@react-three/drei";
import { ThreeEvent, useFrame } from "@react-three/fiber";
import { useCallback, useRef, useState } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";
import { useMediaQuery } from "../hooks/useMediaQuery";

type GLTFResult = GLTF & {
  nodes: {
    group830039088: THREE.Mesh;
    group108580628: THREE.Mesh;
  };
  materials: {
    mat23: THREE.MeshStandardMaterial;
    mat21: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/halloween/Ghost-transformed.glb"
  ) as GLTFResult;

  const ref = useRef<THREE.Group | null>(null);

  const [animate, setAnimate] = useState<boolean>(false);

  const isMediumSize = useMediaQuery("(min-width: 768px)");

  const [animation] = useSpring(
    () => ({
      from: {
        scale: 0.1,
      },
      to: {
        scale: 0,
      },
      reverse: !animate,
      onResolve: () => {
        if (!ref.current) {
          return;
        }

        if (animate) {
          ref.current?.position.set(
            Math.random() * (isMediumSize ? 2 : 0.5),
            Math.random() * (isMediumSize ? 2 : 1),
            Math.random() * (isMediumSize ? 2 : 1)
          );
        }

        setAnimate(false);
      },
    }),
    [animate, isMediumSize]
  );

  const onClick = useCallback((e: ThreeEvent<MouseEvent>) => {
    e.stopPropagation();

    if (!ref.current) {
      return;
    }

    const audio = new Audio("/halloween/ghost.mp3");
    audio.play();

    setAnimate(true);
  }, []);

  useFrame(({ clock }) => {
    if (!ref.current) {
      return;
    }

    ref.current.position.y =
      ((props.position ?? [0, 0, 0]) as [number, number, number])[1] +
      Math.sin(clock.getElapsedTime()) * 0.05;
  });

  return (
    <a.group
      {...props}
      scale={animation.scale}
      ref={ref}
      dispose={null}
      onClick={onClick}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.group830039088.geometry}
        material={materials.mat23}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.group108580628.geometry}
        material={materials.mat21}
      />
    </a.group>
  );
}

useGLTF.preload("/Ghost-transformed.glb");

export default Model;
