/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 .\otter.glb -Ttse
*/

import * as THREE from "three";
import React, { useEffect } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";

type ActionName = "idle";

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    body: THREE.SkinnedMesh;
    eyes: THREE.SkinnedMesh;
    nose: THREE.SkinnedMesh;
    whisker1: THREE.SkinnedMesh;
    whisker2: THREE.SkinnedMesh;
    whisker3: THREE.SkinnedMesh;
    whisker4: THREE.SkinnedMesh;
    spine: THREE.Bone;
  };
  materials: {
    otter: THREE.MeshStandardMaterial;
    eye: THREE.MeshStandardMaterial;
    nose: THREE.MeshStandardMaterial;
    whiskers: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export function Otter(props: JSX.IntrinsicElements["group"]) {
  const group = React.useRef<THREE.Group>();
  const { scene, animations } = useGLTF("/models/otter/otter-transformed.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  // Play idle animation and loop it forever with reverse
  useEffect(() => {
    actions.idle!.loop = THREE.LoopPingPong;
    actions.idle!.play();
  }, [actions]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="metarig">
          <primitive object={nodes.spine} />
        </group>
        <skinnedMesh
          name="body"
          geometry={nodes.body.geometry}
          material={materials.otter}
          skeleton={nodes.body.skeleton}
        />
        <skinnedMesh
          name="eyes"
          geometry={nodes.eyes.geometry}
          material={materials.eye}
          skeleton={nodes.eyes.skeleton}
        />
        <skinnedMesh
          name="nose"
          geometry={nodes.nose.geometry}
          material={materials.nose}
          skeleton={nodes.nose.skeleton}
        />
        <skinnedMesh
          name="whisker1"
          geometry={nodes.whisker1.geometry}
          material={materials.whiskers}
          skeleton={nodes.whisker1.skeleton}
        />
        <skinnedMesh
          name="whisker2"
          geometry={nodes.whisker2.geometry}
          material={materials.whiskers}
          skeleton={nodes.whisker2.skeleton}
        />
        <skinnedMesh
          name="whisker3"
          geometry={nodes.whisker3.geometry}
          material={materials.whiskers}
          skeleton={nodes.whisker3.skeleton}
        />
        <skinnedMesh
          name="whisker4"
          geometry={nodes.whisker4.geometry}
          material={materials.whiskers}
          skeleton={nodes.whisker4.skeleton}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/otter/otter-transformed.glb");
